" Mapping leader
let mapleader=","
let g:go_version_warning = 0

" set plugins and indents
filetype indent on
filetype plugin indent on

" Set various configs
set nocompatible
set guicursor=
" set shortmess=atOI
set ignorecase
set pumheight=20
set wrap
set title
set nobackup
set noswapfile
set hidden
set hlsearch
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set autoindent
set wildmenu
set backspace=indent,eol,start
set number relativenumber
syntax on
set list
set laststatus=2
set completeopt=longest,menuone,preview
set timeoutlen=1000
set ttimeoutlen=0
set termguicolors

" Remaps for objects
onoremap iq i'
onoremap iQ i"
onoremap aq a'
onoremap aQ a"
onoremap sq s'
onoremap sQ s"
onoremap , t,
vnoremap iq i'
vnoremap iQ i""

" Auto commands
autocmd BufEnter config set filetype=conf
autocmd BufEnter *.py set shiftwidth=2 tabstop=2 softtabstop=2 expandtab
autocmd BufEnter * setlocal formatoptions-=cro

" remembering cursor position
function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction
augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END

" global marks for files
autocmd BufLeave *.css normal! mC
autocmd BufLeave *.html normal! mH
autocmd BufLeave *.js normal! mJ
autocmd BufLeave *.py normal! mP

" Mappings
" Mapping <leader>s to hl and set no highlight on search
nnoremap <silent><expr> <leader>s (&hls && v:hlsearch ? ':nohls' : ':set hls')."\n"
nnoremap <space>w :w<cr>
nnoremap <space>z :qa<CR>
" nnoremap <space><space>w :only<CR> :wq<CR>
" reindent file
nnoremap <leader>f mzgg=G`z
" buffer commands
nmap <space>1 <Plug>BufTabLine.Go(1)
nmap <space>2 <Plug>BufTabLine.Go(2)
nmap <space>3 <Plug>BufTabLine.Go(3)
nmap <space>4 <Plug>BufTabLine.Go(4)
nmap <space>5 <Plug>BufTabLine.Go(5)
nmap <space>6 <Plug>BufTabLine.Go(6)
nmap <space>7 <Plug>BufTabLine.Go(7)
nmap <space>8 <Plug>BufTabLine.Go(8)
nmap <space>9 <Plug>BufTabLine.Go(9)
nmap <space>0 <Plug>BufTabLine.Go(10)
nnoremap <silent> <space>q :bd<CR>
" Setting copy into system clipboard
nnoremap <leader>b :buffers<cr>:b<space> 
nnoremap <space>v :e ~/.vimrc<CR>

nnoremap <space>j 20j
nnoremap <space>k 20k
vnoremap <space>j 20j
vnoremap <space>k 20k

nnoremap <leader><leader> '
nnoremap <c-F> :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
" set mapping for replacing word under cursor with word in register
nnoremap <c-w>> :vertical resize +15<CR>
nnoremap <c-w>< :vertical resize -15<CR>
nnoremap <c-w>- :resize -10<CR>
nnoremap <c-w>+ :resize +10<CR>
nnoremap <Leader>cd :cd %:h<CR>
" Making up,down,left,right disabled
map <Up> <Nop>
map <Down> <Nop>
map <Left> <Nop>
map <Right> <Nop>
" Mapping ctrl+hjkl to move to buffer
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
" More 'natural' movements with jk
nnoremap j gj
nnoremap k gk

"Fixing arrow keys
noremap <silent> <C-[>OC <Right>|
inoremap <silent> <C-[>OD <Left>|
inoremap <silent> <C-[>OB <Down>|
inoremap <silent> <C-[>OA <Up>|

" Copying to clipboard
vmap <c-c> "+y
nnoremap <silent> <space>q :BD<CR>

" Closing useless buffers
nnoremap <c-c> :bwipeout<CR>

" Useful commands
let g:ctrlp_use_caching = 0
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects
  " .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g "" --hidden --ignore-dir .git'

  " ag is fast enough that CtrlP doesn't need to cache
endif

call plug#begin('~/.local/share/nvim/site/autoload')
Plug 'othree/html5.vim'
Plug 'pangloss/vim-javascript'
Plug 'evanleck/vim-svelte', {'branch': 'main'}
Plug 'junegunn/seoul256.vim'

Plug 'norcalli/nvim-colorizer.lua'

Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'codechips/coc-svelte', {'do': 'npm install'}
Plug 'Shougo/context_filetype.vim'
Plug 'honza/vim-snippets'

" Plug 'shime/vim-livedown'

" Plug 'bagrat/vim-buffet'

Plug 'vifm/vifm.vim'

Plug 'qpkorr/vim-bufkill'

Plug 'alexghergh/nvim-tmux-navigation'
Plug 'junegunn/gv.vim'

" Flutter/Dart plugins
Plug 'dart-lang/dart-vim-plugin'
Plug 'thosakwe/vim-flutter'
Plug 'natebosch/vim-lsc', {'for': 'dart.js,dart'}
Plug 'natebosch/vim-lsc-dart'

" Plug 'JamshedVesuna/vim-markdown-preview'

" Splitjoin
Plug 'AndrewRadev/splitjoin.vim'

" Dirvish for file navigation
Plug 'justinmk/vim-dirvish'

" Better searching
Plug 'markonm/traces.vim'

" Buffer realted plugs
Plug 'ap/vim-buftabline'

" Index searching
Plug 'henrik/vim-indexed-search'

" extending vim
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-abolish'
Plug 'ntpeters/vim-better-whitespace'

" coding related plugs
Plug 'w0rp/ale'
" Removing curr js plugins for jsx-improve, uncomment it later
" Plug 'pangloss/vim-javascript', {'for': 'javascript.js,js,javascript'}
" Plug 'mxw/vim-jsx', {'for': 'javascript.js,js,javascript'}
Plug 'jiangmiao/auto-pairs'
Plug 'jceb/emmet.snippets'
Plug 'honza/vim-snippets'
Plug 'fatih/vim-go'
" Disable for testing
" Plug 'Valloric/MatchTagAlways'
Plug 'chemzqm/vim-jsx-improve', {'for': 'javascript.jsx,jsx'}

" Sugaring
Plug 'mhinz/vim-signify'
Plug 'kshenoy/vim-signature'
Plug 'morhetz/gruvbox'
Plug 'itchyny/lightline.vim'
Plug 'ryanoasis/vim-devicons'

" utils
Plug 'Yggdroot/indentLine'
Plug 'ludovicchabant/vim-gutentags'
Plug 'tpope/vim-fugitive'
" Plug 'tpope/vim-surround'
Plug 'ctrlpvim/ctrlp.vim'

Plug 'taohexxx/lightline-buffer'

Plug 'machakann/vim-sandwich'

Plug 'windwp/nvim-autopairs'

Plug 'nvim-treesitter/nvim-treesitter'

" Set UTF 8 for dev icons
set encoding=UTF-8
call plug#end()

" Setting all at the end due to some plugins overriding certain settings
set cursorline
set noerrorbells
set visualbell
set smartcase
set belloff=all
set splitright
set splitbelow

" Netrw settings
let g:netrw_liststyle = 3
let g:netrw_banner = 0
let g:netrw_browse_split = 4
let g:netrw_winsize = 20
let g:netrw_altv = 1

highlight Normal guibg=NONE ctermbg=NONE
highlight NonText ctermbg=NONE

" Buftabline settings
let g:buftabline_show=1
let g:buftabline_numbers=2
let g:buftabline_indicators=1
highlight link BufTabLineCurrent LightlineLeft_normal_1
highlight link BufTabLineActive LightlineRight_normal_2
highlight link BufTabLineHidden LightlineRight_normal_2
nnoremap <leader>b :set nomore <Bar> :ls <Bar> :set more <CR>:b<Space>

" indentLine settings
let g:indentLine_char = '|'

" Markbar and Peekaboo
map <Leader><Leader>m <Plug>ToggleMarkbar
nmap <space>` <Plug>OpenMarkbarPeekabooApostrophe
let g:markbar_enable_peekaboo = v:false

" Vim move
let g:move_key_modifier='A'

" Tagbar
nnoremap <F8> :TagbarToggle<CR>

" Python flake
let python_highlight_all=1

" Gutentags
set statusline+=%{gutentags#statusline()}
let g:gutentags_ctags_exclude = ["*.min.js", "*.min.css", "build", "vendor", ".git", "node_modules", "*.vim/bundle/*"]

" Git push function
function! FuGitPush()
  let branchHead = fugitive#Head()
  execute ':Git push origin ' . branchHead
endfunction

nnoremap <space>gs :Git<CR>
nnoremap <space>gb :Git blame<CR>
nnoremap <space>gC :Git commit<CR>
nnoremap <space>gp :call FuGitPush()<CR>
nnoremap <leader>2 :diffget //2<CR>
nnoremap <leader>3 :diffget //3<CR>

" Signify hunk jumping
nmap <space>c <plug>(signify-next-hunk)
nmap <space>C <plug>(signify-prev-hunk)

" Local vimrc
" let g:localvimrc_persistent=1

" CtrlP Configs
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP $PWD'
let g:ctrlp_working_path_mode='ra'
nnoremap <space>p :CtrlPBuffer<CR>
nnoremap <Leader><Leader>p :CtrlPTag<CR>
" set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/node_modules/*
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
" let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'

" Lightline conf
let g:lightline={}
let g:lightline.colorscheme='seoul256'
let g:lightline.component_function={
      \ 'gitbranch': 'fugitive#head',
      \ 'filetype': 'MyFiletype',
      \ 'fileformat': 'MyFileformat'
      \}
let g:lightline.component_expand={
      \ 'linter_checking': 'lightline#ale#checking',
      \ 'linter_warnings': 'lightline#ale#warnings',
      \ 'linter_errors': 'lightline#ale#errors'
      \}
let g:lightline.component_type={
      \ 'linter_checking': 'left',
      \ 'linter_warnings': 'warning',
      \ 'linter_errors': 'error'
      \}
let g:lightline.active={
      \ 'left' : [ [ 'mode', 'paste'  ],
      \            [ 'gitbranch', 'readonly', 'relativepath', 'modified'  ] ],
      \ 'right': [ [ 'linter_checking', 'linter_errors', 'linter_warnings'  ],
      \            [ 'lineinfo'  ],
      \            [ 'gutentags', 'filetype', 'percent'  ] ]
      \}
let g:lightline#ale#indicator_checking="\uf110 "
let g:lightline#ale#indicator_warnings="\uf071 "
let g:lightline#ale#indicator_errors="\uf05e "

" ALE conf
let g:ale_linter_aliases = { 'svelte': ['css', 'typescript'] }
let g:ale_linters = { 'javascript': ['eslint'], 'svelte': ['stylelint', 'eslint', 'tsserver'] }
" let g:ale_linters = { 'jsx': ['eslint', 'jshint'] }
" let g:ale_linters = { 'html': ['tidy'] }
" let g:ale_linters = { 'json': ['jsonlint'] }
" let g:ale_linters = { 'php': ['phpcs'] }
" let g:ale_linters = { 'scss': ['sass-lint'] }
" let g:ale_linters = { 'css': ['csslint', 'stylelint'] }
" let g:ale_linters = { 'typescript': ['eslint', 'tslint', 'tsserver', 'prettier'] }
" let g:ale_linters = { 'cpp': ['gcc', 'clang'] }
" let g:ale_sign_error='●'
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_sign_error='✗'
let g:ale_sign_warning='--'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = '0'
let g:ale_lint_on_save = '1'
nmap <silent> <space>E <Plug>(ale_previous_wrap)
nmap <silent> <space>e <Plug>(ale_next_wrap)
highlight ALEError ctermbg=DarkMagenta
let g:ale_javascript_eslint_executable='../node_modules/.bin/eslint'
let g:ale_fixers = ['eslint']
" let g:ale_javascript_eslint_executable='eslint'

" MatchTags and last place
highlight MatchTag ctermfg=black ctermbg=lightgreen guifg=lightgreen
let g:lastplace_ignore = "gitcommit,gitrebase,svn,hgcommit"

" Markdown preview config
let vim_markdown_preview_hotkey='<c-m>'

" Vim go
let g:go_def_mode = 'godef'
let g:go_highlight_operators = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_parameters = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_types = 1
let g:go_highlight_extra_types = 1

" Dirvish mode
let g:dirvish_mode = ':sort ,^.*[\/],'

" colorscheme desertink

let g:seoul256_background = 235

colorscheme seoul256
set background=dark

" Svelte-related configuration
let g:svelte_preprocessors = ['typescript']

" COC Config
function s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('')
  else
    call CocAction('doHover')
  endif
endfunction

let g:coc_node_path = '/Users/kenyap/.nvm/versions/node/v14.18.1/bin/node'
set updatetime=300
set shortmess+=c
nnoremap K :call show_documentation()

if !exists('g:context_filetype#same_filetypes')
  let g:context_filetype#filetypes = {}
endif

let g:context_filetype#filetypes.svelte =
\ [
\   {'filetype' : 'javascript', 'start' : '<script>', 'end' : '</script>'},
\   {
\     'filetype': 'typescript',
\     'start': '<script\%( [^>]*\)\? \%(ts\|lang="\%(ts\|typescript\)"\)\%( [^>]*\)\?>',
\     'end': '',
\   },
\   {'filetype' : 'css', 'start' : '<style \?.*>', 'end' : '</style>'},
\ ]

let g:ft = ''

" Coc-Snippets (With tab completion)
inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'
runtime macros/sandwich/keymap/surround.vim

lua << EOF
require'nvim-autopairs'.setup {}


local remap = vim.api.nvim_set_keymap
local npairs = require('nvim-autopairs')
npairs.setup({map_cr=false})

-- skip it, if you use another global object
_G.MUtils= {}

MUtils.completion_confirm=function()
  if vim.fn.pumvisible() ~= 0  then
    return vim.fn["coc#_select_confirm"]()
  else
    return npairs.autopairs_cr()
  end
end

remap('i' , '<CR>','v:lua.MUtils.completion_confirm()', {expr = true , noremap = true})
EOF

command! Vimrc :vs ~/.config/nvim/init.vim
command! Uniq :sort u

" nvim-tmux-navigation
nnoremap <silent> <C-h> :lua require'nvim-tmux-navigation'.NvimTmuxNavigateLeft()<cr>
nnoremap <silent> <C-j> :lua require'nvim-tmux-navigation'.NvimTmuxNavigateDown()<cr>
nnoremap <silent> <C-k> :lua require'nvim-tmux-navigation'.NvimTmuxNavigateUp()<cr>
nnoremap <silent> <C-l> :lua require'nvim-tmux-navigation'.NvimTmuxNavigateRight()<cr>
nnoremap <silent> <C-\> :lua require'nvim-tmux-navigation'.NvimTmuxNavigateLastActive()<cr>
nnoremap <silent> <C-Space> :lua require'nvim-tmux-navigation'.NvimTmuxNavigateNext()<cr>

" Make session
nnoremap <space>ms :mksession! ~/.config/nvim/vim-session.vim<CR>

" cd into local directory
augroup cdpwd
  autocmd!
  autocmd VimEnter * cd $PWD
augroup END

" Treesitter
lua << EOF
require'nvim-treesitter.configs'.setup {
   highlight = { enable = true },
   incremental_selection = { enable = true },
   textobjects = { enable = true },
 }
EOF

lua << EOF
require'colorizer'.setup()
EOF
